Trie:
A try is like the bastard child of a hashtable and a tree. It specializes at retrieval and can beat hastables and trees in very specific situations. It is used often with autocomplete or autosuggest tools. 
It works by making each node in a tree like a piece of a key for a hashtable. The full keys are found in all leaves. The parents of the leaves will contain parts of the keys that are shared between their children.

Heaps:

A heap is often implemented in a tree or an array. Arrays are more favorable and tend to bring out the strengths of heaps in the particular situations they are designed for like priority queues. A heap excels at quickly finding the  smallest or largest value of a set of values. It loosely sorts data by only ensuring that depending on whether you are using a min heap or max heap the parent nodes are always bigger or smaller than their children.


Algorithms:

Breadth-First vs Depth First:
When dealing with graphs if you are trying to find a route between multiple points you would first search for path by going to all nearby nodes of x hops away. Then by incrementing x to the next layer of nodes. Thus you get this breadth first approach as you aren't just diving in multiple hops away from origin but, instead looking at all nodes within 1 hop. Then all nodes within 2 hops and so on and so forth.Often times this breadth first search is implemented with a queue. Where you put all nodes in a queue and can therefore dictate what goes first and what has already been checked.
Depth first is generally implemented via recursion where you use flags to keep track of already visited nodes. It goes node by node asking each node if they have a path to x location and if so as soon as they find a path even if the path isn't the fastest they take it. They don't evaluate the breadth of choices.

